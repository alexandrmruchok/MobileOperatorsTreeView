#include "OperatorDialog.h"
#include "ui_OperatorDialog.h"

#include <QDebug>

#include <QFileInfo>
#include <QtSql>
#include "Utils.h"
#include "defines.h"
#include "MobileOperatorsModel.h"

OperatorDialog::OperatorDialog(QWidget *parent /*= nullptr*/)
    : QDialog(parent)
    , ui(new Ui::OperatorDialog)
    , m_stt_mode                 (&m_stateMachine)
    , m_stt_mode_creating        (&m_stt_mode)
    , m_stt_mode_editing         (&m_stt_mode)
    , m_stt_acceptability        (&m_stateMachine)
    , m_stt_acceptability_yes    (&m_stt_acceptability)
    , m_stt_acceptability_no     (&m_stt_acceptability)
    , m_stt_nameFilling          (&m_stateMachine)
    , m_stt_nameFilling_filled   (&m_stt_nameFilling)
    , m_stt_nameFilling_empty    (&m_stt_nameFilling)
    , m_stt_mccValidation        (&m_stateMachine)
    , m_stt_mccValidation_right  (&m_stt_mccValidation)
    , m_stt_mccValidation_wrong  (&m_stt_mccValidation)
{
    ui->setupUi(this);

    m_stateMachine.setChildMode(QState::ParallelStates);
    m_stateMachine.setGlobalRestorePolicy(QState::RestorePolicy::RestoreProperties);
    m_stt_mode.setInitialState(&m_stt_mode_creating);
    m_stt_acceptability.setInitialState(&m_stt_acceptability_no);
    m_stt_nameFilling.setInitialState(&m_stt_nameFilling_empty);
    m_stt_mccValidation.setInitialState(&m_stt_mccValidation_wrong);

    m_stt_mccValidation_wrong.addTransition(this, &OperatorDialog::mccChangedToRight, &m_stt_mccValidation_right);
    m_stt_mccValidation_right.addTransition(this, &OperatorDialog::mccChangedToWrong, &m_stt_mccValidation_wrong);
    m_stt_nameFilling_empty.addTransition (this, &OperatorDialog::nameChangedToFilled, &m_stt_nameFilling_filled);
    m_stt_nameFilling_filled.addTransition(this, &OperatorDialog::nameChangedToEmpty, &m_stt_nameFilling_empty);

    m_stt_acceptability_yes.addTransition(this, &OperatorDialog::mccChangedToWrong  , &m_stt_acceptability_no);
    m_stt_acceptability_yes.addTransition(this, &OperatorDialog::nameChangedToEmpty , &m_stt_acceptability_no);
    m_stt_acceptability_no .addTransition(this, &OperatorDialog::allFieldsBecameRight, &m_stt_acceptability_yes);

    m_stt_mode_editing  .addTransition(this, &OperatorDialog::switchedToCreatingMode, &m_stt_mode_creating);
    m_stt_mode_creating .addTransition(this, &OperatorDialog::switchedToEditingMode , &m_stt_mode_editing );


    connect(&m_stt_acceptability_yes, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_acceptability_yes" << "entered";
    });
    connect(&m_stt_acceptability_no, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_acceptability_no" << "entered";
    });
    connect(&m_stt_mccValidation_wrong, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_mccValidation_wrong" << "entered";
    });
    connect(&m_stt_mccValidation_right, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_mccValidation_right" << "entered";
    });

    connect(&m_stt_nameFilling_empty, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_nameFilling_empty" << "entered";
    });
    connect(&m_stt_nameFilling_filled, &QState::entered, [this]{
        qDebug() << "====================" << "m_stt_nameFilling_filled" << "entered";
    });


    connect(&m_stt_mccValidation_wrong, &QState::entered, [this]{
        Utils::setPropertyAndUpdateStyle(this->ui->lneMcc, Properties::WRONG, true);
    });
    connect(&m_stt_mccValidation_right, &QState::entered, [this]{
        Utils::setPropertyAndUpdateStyle(this->ui->lneMcc, Properties::WRONG, false);
        if (m_stt_nameFilling_filled.active())
            emit this->allFieldsBecameRight();
    });

    connect(&m_stt_nameFilling_empty, &QState::entered, [this]{
        Utils::setPropertyAndUpdateStyle(this->ui->lneName, Properties::WRONG, true);
    });
    connect(&m_stt_nameFilling_filled, &QState::entered, [this]
    {
        Utils::setPropertyAndUpdateStyle(this->ui->lneName, Properties::WRONG, false);
        if (m_stt_mccValidation_right.active())
            emit this->allFieldsBecameRight();
    });

    m_stt_acceptability_no.assignProperty(this->ui->pbtSave, qPrintable(Properties::ENABLED), false);
    m_stt_mode_editing    .assignProperty(this->ui->lneMcc , qPrintable(Properties::ENABLED), false);
    m_stt_mode_editing    .assignProperty(this->ui->lneMnc , qPrintable(Properties::ENABLED), false);

    m_stateMachine.start();

    QIntValidator *intValidator = new QIntValidator(0, 99999, this);
    ui->lneMcc->setValidator(intValidator);
    ui->lneMnc->setValidator(intValidator);

    connect(ui->lneMcc, &QLineEdit::textChanged, this, &OperatorDialog::checkAndUpdateMcc);
    connect(ui->lneMnc, &QLineEdit::textChanged, this, &OperatorDialog::updateOperatorIcon);

    connect(ui->lneName, &QLineEdit::textChanged, [this](const QString &)
    {
        if (this->ui->lneName->text().isEmpty())
            emit this->nameChangedToEmpty();
        else
            emit this->nameChangedToFilled();
    });

    connect(this->ui->pbtSave, &QPushButton::clicked, [this]
    {

        if (!this->saveToDb())
            qDebug() << "Error while saving to db!";
        else
        {
            this->close();
            emit this->savedToDb(m_stt_mode_creating.active());
        }
    });

}

OperatorDialog::~OperatorDialog()
{
    delete ui;
}

QString OperatorDialog::name()
{
    return this->ui->lneName->text();
}

int OperatorDialog::mnc()
{
    return this->ui->lneMnc->text().toInt();
}

int OperatorDialog::mcc()
{
    return this->ui->lneMcc->text().toInt();
}

void OperatorDialog::editMobileOperator(MobileOperator *a_mobileOperator /*= nullptr*/)
{
    m_mobileOperator = a_mobileOperator;

    if (a_mobileOperator)
    {
        this->setName(a_mobileOperator->name());
        this->setMcc(a_mobileOperator->country()->mcc());
        this->setMnc(a_mobileOperator->mnc());
        emit this->switchedToEditingMode();
        this->open();
    }
    else
    {
        this->setName("");
        this->ui->lneMcc->clear();
        this->ui->lneMnc->clear();
        emit this->switchedToCreatingMode();
        this->open();
    }
}




void OperatorDialog::checkAndUpdateMcc()
{
    qDebug() << "OperatorDialog::checkAndUpdatemcc()";
    m_country = MobileOperatorsModel::instance()->countryByMcc(this->mcc());


    QString iconPath {};
    if (m_country)
    {
        iconPath = m_country->iconPath();
        emit this->mccChangedToRight();
    }
    else
        emit this->mccChangedToWrong();

    if (iconPath.isEmpty())
        iconPath = ":/icons/question.png";

    this->ui->lblMccIcon->setPixmap(iconPath);
}

void OperatorDialog::updateOperatorIcon()
{
    qDebug() << "updateOperatorIcon";

    QString filePath{":/icons/Operators/%1_%2.png"};

    filePath = filePath.arg(this->mcc()).arg(this->mnc());
    if (!QFileInfo::exists(filePath)) {
        filePath = ":/icons/question.png";
    }

    this->ui->lblOperatorIcon->setPixmap(filePath);
}

bool OperatorDialog::saveToDb()
{
    if (m_mobileOperator)
        return MobileOperatorsModel::instance()->changeMobileOperator(*m_mobileOperator, this->name());

    MobileOperatorsModel::instance()->addMobileOperator(this->name(), *this->m_country, this->mnc());
}

void OperatorDialog::setName(const QString &a_name)
{
    this->ui->lneName->setText(a_name);
}

void OperatorDialog::setMnc(int a_MNC)
{
    this->ui->lneMnc->setText(QString::number(a_MNC));
}

void OperatorDialog::setMcc(int a_mcc)
{
    this->ui->lneMcc->setText(QString::number(a_mcc));
}
